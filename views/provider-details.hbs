<h2>Постачальник {{_id}}</h2>
<div class="row">
  <div class="col s12 m6">
    <div class="card blue-grey darken-1">
      <div class="card-content white-text">
        <div class="provider-title-wrapper">
          <i class="material-icons small provider-icon">person_pin</i>
          <span class="card-title provider-title">{{provider.provider}}</span>
        </div>
        <ul class="provider-details-table">
          <li class="provider-detail">
            <i class="material-icons small provider-icon">contact_phone</i>
            <span>{{provider.phone}}</span>
          </li>
          <li class="provider-detail">
            <i class="material-icons small provider-icon">contact_mail</i>
            <span>{{provider.email}}</span>
          </li>
        </ul>
      </div>
      <div class="card-action">
        <a href="#" class="edit-btn">Редагувати</a>
        <a href="#" class="delete-btn">Видалити</a>
        <a href="#" class="save-btn" style="display: none;">Зберегти</a>
        <a href="#" class="cancel-btn" style="display: none;">Скасувати</a>
      </div>
    </div>
  </div>
  <div class="col s12 m5">
    <div class="card-panel teal">
      <span class="white-text">
        <i class="material-icons">info</i>
        Завантажте CSV-файл з матеріалами, отриманий від цього постачальника.
      </span>
    </div>
    <form action="/provider/{{provider._id}}/upload-materials" method="POST" enctype="multipart/form-data">
      <div class="file-field input-field">
        <div class="btn">
          <span>Файл</span>
          <input type="file" name="file" accept=".csv" required>
        </div>
        <div class="file-path-wrapper">
          <input class="file-path validate" type="text" placeholder="Оберіть файл">
        </div>
      </div>
      <button class="btn waves-effect waves-light" type="submit">
        Завантажити
        <i class="material-icons right">send</i>
      </button>
    </form>
    <button class="btn waves-effect waves-light red" id="clearTableBtn" style="margin-top: 10px;">Очистити таблицю<i
        class="material-icons right">delete</i></button>
  </div>
</div>
<table class="provider-materials">
  <tr class="provider-materials-header">
    <td>Категорія</td>
    <td>Матеріал</td>
    <td>Ціна</td>
  </tr>
  {{#each provider.materials}}
  <tr>
    <td>{{this.category}}</td>
    <td>{{this.title}}</td>
    <td>{{this.price}}</td>
  </tr>
  {{/each}}
</table>

<!-- Модальное окно для подтверждения удаления -->
<div id="deleteModal" class="modal">
  <div class="modal-content">
    <h4>Підтвердження видалення</h4>
    <p>Ви впевнені, що хочете видалити цього постачальника?</p>
  </div>
  <div class="modal-footer">
    <a href="#!" class="modal-close waves-effect waves-green btn-flat" id="cancelDelete">Скасувати</a>
    <a href="#!" class="modal-close waves-effect waves-red btn-flat" id="confirmDelete">Видалити</a>
  </div>
</div>

<div id="clearTableModal" class="modal">
  <div class="modal-content">
    <h4>Підтвердження очистки таблиці</h4>
    <p>Ви впевнені, що хочете видалити всі матеріали з таблиці?</p>
  </div>
  <div class="modal-footer">
    <a href="#!" class="modal-close waves-effect waves-green btn-flat" id="cancelClearTable">Скасувати</a>
    <a href="#!" class="modal-close waves-effect waves-red btn-flat" id="confirmClearTable">Очистити</a>
  </div>
</div>

<script>
  const formEl = document.querySelector('form');
  const tableEl = document.querySelector('.provider-materials');

  formEl.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(formEl);
    const response = await fetch(`/provider/{{provider._id}}/upload-materials`, {
      method: 'POST',
      body: formData,
    });

    const data = await response.json();

    if (data.success) {
      // Обновляем таблицу материалов
      tableEl.innerHTML = `
        <tr class="provider-materials-header">
          <td>Категорія</td>
          <td>Матеріал</td>
          <td>Ціна</td>
        </tr>
        ${data.provider.materials
          .map(
            (material) => `
            <tr>
              <td>${material.category}</td>
              <td>${material.title}</td>
              <td>${material.price}</td>
            </tr>
          `
          )
          .join('')}
      `;

      // Отображаем toast-сообщение
      M.toast({ html: 'Матеріали завантажено' });
    } else {
      M.toast({ html: data.msg });
    }
  });

  const editBtn = document.querySelector('.edit-btn');
  const saveBtn = document.querySelector('.save-btn');
  const cancelBtn = document.querySelector('.cancel-btn');
  const deleteBtn = document.querySelector('.delete-btn');
  const providerTitle = document.querySelector('.provider-title');
  const providerDetails = document.querySelectorAll('.provider-detail span');

  let isEditing = false;

  editBtn.addEventListener('click', () => {
    isEditing = true;
    editBtn.style.display = 'none';
    deleteBtn.style.display = 'none';
    saveBtn.style.display = 'inline';
    cancelBtn.style.display = 'inline';

    providerTitle.contentEditable = true;
    providerDetails.forEach(detail => detail.contentEditable = true);
  });

  cancelBtn.addEventListener('click', () => {
    isEditing = false;
    editBtn.style.display = 'inline';
    deleteBtn.style.display = 'inline';
    saveBtn.style.display = 'none';
    cancelBtn.style.display = 'none';

    providerTitle.contentEditable = false;
    providerDetails.forEach(detail => detail.contentEditable = false);

    // Восстановить исходные значения
    const provider = '{{{provider.provider}}}';
    const phone = '{{{provider.phone}}}';
    const email = '{{{provider.email}}}';

    providerTitle.textContent = provider;
    providerDetails[0].textContent = phone;
    providerDetails[1].textContent = email;
  });

  saveBtn.addEventListener('click', () => {
    const providerData = {
      provider: providerTitle.textContent,
      phone: providerDetails[0].textContent,
      email: providerDetails[1].textContent,
    };

    fetch(`/provider/{{ provider._id }}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(providerData),
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          M.toast({ html: 'Дані постачальника успішно оновлено' });
          isEditing = false;
          editBtn.style.display = 'inline';
          deleteBtn.style.display = 'inline';
          saveBtn.style.display = 'none';
          cancelBtn.style.display = 'none';

          providerTitle.contentEditable = false;
          providerDetails.forEach(detail => detail.contentEditable = false);
        } else {
          M.toast({ html: data.msg });
        }
      })
      .catch(error => {
        console.error('Ошибка:', error);
        M.toast({ html: 'Виникла помилка при оновленні даних' });
      });
  });

  deleteBtn.addEventListener('click', async (event) => {
    event.preventDefault();

    // Откройте модальное окно
    const modal = document.querySelector('#deleteModal');
    const instance = M.Modal.getInstance(modal);
    instance.open();

    // Обработка подтверждения или отмены удаления
    const confirmDelete = document.querySelector('#confirmDelete');
    const cancelDelete = document.querySelector('#cancelDelete');

    confirmDelete.addEventListener('click', async () => {
      try {
        const providerId = '{{ provider._id }}'; // Получить ID поставщика из шаблона Handlebars
        await fetch(`/provider/${providerId}`, {
          method: 'DELETE',
        });

        // Переадресация на страницу со списком поставщиков после успешного удаления
        window.location.href = '/providers';
      } catch (error) {
        console.error('Ошибка при удалении поставщика:', error);
        M.Toast.dismissAll();
        M.toast({ html: 'Виникла помилка при видаленні постачальника' });
      } finally {
        instance.close();
      }
    });

    cancelDelete.addEventListener('click', () => {
      instance.close();
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    var modalElems = document.querySelectorAll('.modal');
    var modalInstances = M.Modal.init(modalElems);
  });

  const clearTableBtn = document.getElementById('clearTableBtn');
  const clearTableModal = document.getElementById('clearTableModal');
  const confirmClearTable = document.getElementById('confirmClearTable');
  const cancelClearTable = document.getElementById('cancelClearTable');

  const modalInstance = M.Modal.init(clearTableModal);

  clearTableBtn.addEventListener('click', () => {
    modalInstance.open();
  });

  confirmClearTable.addEventListener('click', async () => {
    try {
      const providerId = '{{ provider._id }}';
      const response = await fetch(`/provider/${providerId}/clear-materials`, {
        method: 'DELETE',
      });

      if (response.ok) {
        tableEl.innerHTML = `
          <tr class="provider-materials-header">
            <td>Категорія</td>
            <td>Матеріал</td>
            <td>Ціна</td>
          </tr>
        `;
        M.toast({ html: 'Таблицю очищено' });
      } else {
        M.toast({ html: 'Виникла помилка при очищенні таблиці' });
      }
    } catch (error) {
      console.error('Ошибка при очистке таблицы:', error);
      M.toast({ html: 'Виникла помилка при очищенні таблиці' });
    } finally {
      modalInstance.close();
    }
  });

  cancelClearTable.addEventListener('click', () => {
    modalInstance.close();
  });
</script>